<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4. Kubernetes on Ops2Devops Workshop documentation</title><link>https://ops2devops.tanzu.dk/4.k8s/</link><description>Recent content in 4. Kubernetes on Ops2Devops Workshop documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Apr 2022 20:33:12 +0200</lastBuildDate><atom:link href="https://ops2devops.tanzu.dk/4.k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>01 Setup Kubeconfig</title><link>https://ops2devops.tanzu.dk/4.k8s/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/1/</guid><description>To access a kubernetes cluster, you first need to have a kubeconfig file. This files is located in your home directory, in the .kube directory.
On your current machine, there is no kubeconfig file, so in the next few steps, we will copy it, using SCP, from the kubernetes host.
Run scp ubuntu@10.0.1.9:/home/ubuntu/.kube/config /home/ubuntu/.kube/config Type yes to Accept certificate Type password VMware1! Look at the config file by running cat /home/ubuntu/.</description></item><item><title>02 Kubectl</title><link>https://ops2devops.tanzu.dk/4.k8s/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/2/</guid><description> Talk in class about Kubectl: CLI/API Yaml files vs commands</description></item><item><title>03 Test connection</title><link>https://ops2devops.tanzu.dk/4.k8s/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/3/</guid><description>To verify the connection to the Kubernetes cluster is working, perform the following steps.
Run kubectl get nodes to see you can connect and that the Kubernetes nodes are active The result should be something like this : NAME STATUS ROLES AGE VERSION k8s Ready &amp;lt;none&amp;gt; 6d1h v1.23.4-2+98fc2022f3ad3e This shows the different nodes of the Kubernetes Cluster, State, Role, Age and version. In this workshop, we are working with a single node Kubernetes cluster, but in the real world, there would probably be 3 masters, and a large number of workers.</description></item><item><title>04 Create Namespace</title><link>https://ops2devops.tanzu.dk/4.k8s/4/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/4/</guid><description>A Kubernetes cluster, cn be split up logical, to seperate different application etc, by using Namespaces We will use them, to give each student, their own namespace. Note there is no security in place, to seperate namespaces. So if you make a typo, you will deploy or delete in another namespace, than your own.
Run kubectl create ns studentx where x is replaced with your student number (See cli if in doubt) Run kubectl get ns and see that your namespace has been created Talk in class, about the concept of a Kubernetes namespace</description></item><item><title>05 Deployment.yml</title><link>https://ops2devops.tanzu.dk/4.k8s/5/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/5/</guid><description> Open deployment.yml file Go thru the file and talk in class about : apiVersion Kind Containers Limits</description></item><item><title>06 Harbor Container registry</title><link>https://ops2devops.tanzu.dk/4.k8s/6/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/6/</guid><description>Kubernetes need a place to pull the container images from. In this lab we are using Harbor an open source container registry, started by VMware.
For our first deployment to work, we first need to build a container, then login and then push the container to that registry.
Start by building the container by running docker build -t registry.tanzu.dk/ops2devops/studentx:v1 . (Change student to your number)
Then login to the registry by running docker login registry.</description></item><item><title>07 Deploy first K8S app</title><link>https://ops2devops.tanzu.dk/4.k8s/7/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/7/</guid><description>To configure the deployment to work for you, perform the following steps.
Change all places in deployment.yml from studentx to your student number. Also change the image to match the container url from the last step. Save the file Run kubectl apply -f deployment.yml -n studentx This deploys the application in your own namespace Verify the application is deployed by running kubectl get all -n studentx Note we did not expose the app, to the outside work.</description></item><item><title>08 Enhance deployment.yaml</title><link>https://ops2devops.tanzu.dk/4.k8s/8/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/8/</guid><description>To skip having to specify the -n every time you do a deployment, the namespace can be included in the deployment. Perform the steps below, to do this.
Add a line to deployment.yml under metadata(remember indentation) with namespace: studentx Run `kubectl apply -f deployment.yml`` See the deployment now happens in the namespace you just specified, by running kubectl get all -n studentx, without you typing it in each command. Delete the deployment again by running kubectl delete -f deployment.</description></item><item><title>09 Verify deployments / Pods</title><link>https://ops2devops.tanzu.dk/4.k8s/9/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/9/</guid><description> If you want to see all deployments across namespaces, then run kubectl get deployments -A You can do the same with pods kubectl get pods -A Or just type kubectl get all -A if you want to see (almost) all types of things running.</description></item><item><title>10 Add service</title><link>https://ops2devops.tanzu.dk/4.k8s/10/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/10/</guid><description>To expose an deployment to the outside world (Lan/Wan etc.) you need to specify a Service. The file is already created. Perform the steps below, to configure it, to match your deployment.
Edit the service.yml file, so the Selector: app namematches the name in the deployment.
Correct studentx to the correct student number.
Change the nodeport, to match your student number, in the last 2 digits.</description></item><item><title>11 Deploy with Service</title><link>https://ops2devops.tanzu.dk/4.k8s/11/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/11/</guid><description>It&amp;rsquo;s normal to split up Kubernetes configuration files, into more files. To deploy them all, in one command, simply add a . in the end, instead of specifiying a single file. We will use this, to deploy both the deployment, and the service, at the same time.
Note, if you have already deployed something, running the command again, just updated the deployment, in case there are changes.
Run kubectl apply -f .</description></item><item><title>12 Cleanup</title><link>https://ops2devops.tanzu.dk/4.k8s/12/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/12/</guid><description>Cleanup is as simple as deploying. Simply run the command below, against the same file or files.
Cleanup by running kubectl delete -f .</description></item></channel></rss>