<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ops2Devops Workshop documentation</title><link>https://ops2devops.tanzu.dk/</link><description>Recent content on Ops2Devops Workshop documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Apr 2022 20:33:12 +0200</lastBuildDate><atom:link href="https://ops2devops.tanzu.dk/index.xml" rel="self" type="application/rss+xml"/><item><title>01 Actions file</title><link>https://ops2devops.tanzu.dk/5.cicd/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/1/</guid><description>We will now setup automatic building of docker images, and pushing it to your private repo, using GitHub Actions.
Open docker-publish.yml Talk about the the file in class. On Env Variables Jobs Packages</description></item><item><title>01 Configure Git</title><link>https://ops2devops.tanzu.dk/2.git/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/1/</guid><description>To use git, you must first setup the username and email, of the person making the changes.
To configure git with your user, type the following commands in the terminal. Replace &amp;ldquo;John D&amp;rdquo; with your own name and email.
git config --global user.name &amp;quot;John Doe&amp;quot;
git config --global user.email johndoe@example.com</description></item><item><title>01 Docker Hub</title><link>https://ops2devops.tanzu.dk/3.docker/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/1/</guid><description> Open https://hub.docker.com Search for Nginx Click on the Official Image (should be the one on top) Go thru the documentation in class : Official Image Reference Tags Image variants OS/Arch Use of the image (Examples)</description></item><item><title>01 Ipadresses</title><link>https://ops2devops.tanzu.dk/1.connect/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/1.connect/1/</guid><description>All Student ipadresses are shared from a Notion page, found here. Dont copy them, until the teacher has updated with the ipadessed, relevant for the current class. You will be given a student number. Each student has a public ipadress. Write it down, since you will use it many times today.
Also write down the public ipadress of the Kubernetes Cluster (Also found on the page)</description></item><item><title>01 Setup Kubeconfig</title><link>https://ops2devops.tanzu.dk/4.k8s/1/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/1/</guid><description>To access a kubernetes cluster, you first need to have a kubeconfig file. This files is located in your home directory, in the .kube directory.
On your current machine, there is no kubeconfig file, so in the next few steps, we will copy it, using SCP, from the kubernetes host.
Run scp ubuntu@10.0.1.9:/home/ubuntu/.kube/config /home/ubuntu/.kube/config Type yes to Accept certificate Type password VMware1! Look at the config file by running cat /home/ubuntu/.</description></item><item><title>02 Connect to environment</title><link>https://ops2devops.tanzu.dk/1.connect/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/1.connect/2/</guid><description>We will now connect to the VScode environment.
Open the browser you are going to use for VScode (Firefox or Chrome), and open the url http://studentip:8080 When you see the login page, login using VMware1! Select I understand on the warning box in the bottom right. You can run thru the getting started guide, or just select mark done. It&amp;rsquo;s up to you.</description></item><item><title>02 Copy actions file</title><link>https://ops2devops.tanzu.dk/5.cicd/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/2/</guid><description>To activate a actions file, you need to place it in the .github/workflows and push it to github. We will do this now.
Copy the file, to the root of your github repo, under .github/workflows by running this cp docker-publish.yml ../../.github/workflows and commit and push your repo after.</description></item><item><title>02 Create first Git Repository</title><link>https://ops2devops.tanzu.dk/2.git/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/2/</guid><description>Using the terminal run the following commands, to create a folder and initialize it as a git repository
Create Folder
mkdir myfirstrepo
Open folder
cd myfirstrepo
Initialize git
git init
Check a new .git folder has been created with content
ls .git
You should see a lot of files and folders. These are the files used by Git, to track all changes you make in you new Git repository.</description></item><item><title>02 Dockerfile</title><link>https://ops2devops.tanzu.dk/3.docker/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/2/</guid><description>From folder 3.Docker
Open the file Dockerfile in VSCode Go thru and talk about the different options FROM WORKDIR RUN COPY EXPOSE CMD</description></item><item><title>02 Kubectl</title><link>https://ops2devops.tanzu.dk/4.k8s/2/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/2/</guid><description> Talk in class about Kubectl: CLI/API Yaml files vs commands</description></item><item><title>03 Build Container</title><link>https://ops2devops.tanzu.dk/3.docker/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/3/</guid><description>From folder 3.Docker
Open a terminal in 3.Docker directory (Hint: Right click the folder, and selcect Open in integrated terminal)
Run the command docker build -t web:v1 . (Note the . in the end)
This triggers a build of a container, with the name web1 and with a version tab of v1
Watch the build as it runs, thru every line of the Dockerfile</description></item><item><title>03 Create first Git Changes (CLI)</title><link>https://ops2devops.tanzu.dk/2.git/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/3/</guid><description>Using the terminal, we will now create the first changes to the Git repository. For now, we will use the terminal, to learn the basics. LAter we will do the same, using the GUI.
Create a file with text
echo &amp;quot;initial content&amp;quot; &amp;gt; file1.txt
Stage changes
git add .
commit changes
git commit -m &amp;quot;My first change&amp;quot;
make a new change to the file</description></item><item><title>03 See running action</title><link>https://ops2devops.tanzu.dk/5.cicd/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/3/</guid><description>Open github.com and find your repository, and select Actions Under Workflows your should now see 2 workflows. 4-k8s-1 and 5-k8s-1. The naming represents module and task, of this class. We will only focus on 5-k8s-1 from now on. Click on the top Workflow Run. The name is the same as your last commit message. You should now see your stages. You only have one called Build so click on that.</description></item><item><title>03 Test connection</title><link>https://ops2devops.tanzu.dk/4.k8s/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/3/</guid><description>Run kubectl get nodes to see you can connect and that the Kubernetes nodes are active The result should be something like this : NAME STATUS ROLES AGE VERSION k8s Ready &amp;lt;none&amp;gt; 6d1h v1.23.4-2+98fc2022f3ad3e This shows the different nodes of the Kubernetes Cluster, State, Role, Age and version. In this workshop, we are working with a single node Kubernetes cluster, but in the real world, there would probably be 3 masters, and a large number of workers.</description></item><item><title>03 Understand VScode</title><link>https://ops2devops.tanzu.dk/1.connect/3/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/1.connect/3/</guid><description>This course will be using VScode for everyting. We will run thru the basics, so you know the tool, you will be working with.
In the top left corner, you will see the main controls of VScode.
Submenu
Files
Search
Git
Debug
Extentions
In this workshop, we will be using Submenu, Files, Git and extentions.</description></item><item><title>04 Create first Git Changes (GUI)</title><link>https://ops2devops.tanzu.dk/2.git/4/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/4/</guid><description>Using the GUI (VScode) we will now do the same as before.
Open the folder you just created myfirst repo in vscode Submeny -&amp;gt; File -&amp;gt; Open Folder -&amp;gt; /home/ubuntu/myfirstrepo/ -&amp;gt; ok
Open file1.txt and add or change the content
Save the file (ctrl + s)
Notice a number on the icon to the left apears. This shows, the number of changes, that has been made, that is not comitted.</description></item><item><title>04 Create Namespace</title><link>https://ops2devops.tanzu.dk/4.k8s/4/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/4/</guid><description> Run kubectl create ns studentx where x is replaced with your student number (See cli if in doubt) Run kubectl get ns and see that your namespace has been created Talk in class, about the concept of a Kubernetes namespace</description></item><item><title>04 Discuss Action concepts</title><link>https://ops2devops.tanzu.dk/5.cicd/4/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/4/</guid><description> Talk in class about : Versions Triggers Build phases Variables Secrets Artifacts Types of jobs Hosted runners</description></item><item><title>04 Run Container</title><link>https://ops2devops.tanzu.dk/3.docker/4/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/4/</guid><description>To create and run a container, based on the image you build, in the last step
Run docker run -p 80:80 web:v1 open a browser to the public ip of your student VM, from your local machine http://studentip:80 See the website that is running :-) Note that when you connect to the website, the logs from the container, is updated in the console. Stop the container pressing ctrl + c</description></item><item><title>05 Deployment.yml</title><link>https://ops2devops.tanzu.dk/4.k8s/5/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/5/</guid><description> Open deployment.yml file Go thru the file and talk in class about : apiVersion Kind Containers Limits</description></item><item><title>05 Fork Repository</title><link>https://ops2devops.tanzu.dk/2.git/5/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/5/</guid><description>In this task, we will Fork the original repository. This gives you your own repository, seperate from the original one.
Open browser on https://github.com/TanzuDK/ops2devops
Make sure you are logged in.
Click Fork in the top right corner
If asked, select your Github user
Check that you are in your forked repository.
The name should be githubusername/ops2devops
Click the green Code button</description></item><item><title>05 Make Changes</title><link>https://ops2devops.tanzu.dk/3.docker/5/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/5/</guid><description>To build a new version, of the container follow the steps
Edit html/index.html by replacing the Student xxx with your name. Build a new version of the container, by running docker build -t web:v2 . Run the new version docker run -p 80:80 web:v2 open a browser to http://studentip:80 and see that the content has changed. Stop the container again by pressing ctrl + c</description></item><item><title>05 Trigger build</title><link>https://ops2devops.tanzu.dk/5.cicd/5/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/5/</guid><description> Change the index.html file under html with new content. And commit and push changes to GitHub. Watch the action trigger again, and see a new build being created.</description></item><item><title>06 Clone Repository</title><link>https://ops2devops.tanzu.dk/2.git/6/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/6/</guid><description>In this task, clone the newly forked repository, so you can work on it localy on your VM.
Make sure you closed the foldes, as asked in the last part of step 4.
Click Files icon, and select the Clone Repository button
Paste the url from before (Note it ends with .git)
Press enter
Folder path should be /home/Ubuntu/
Select ok.</description></item><item><title>06 Github Packages</title><link>https://ops2devops.tanzu.dk/4.k8s/6/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/6/</guid><description>We are using Github&amp;rsquo;s version of docker Hub. To make sure, we don&amp;rsquo;t have to struggle with autentification in this lab, open your forked repository on github.com. Click Packages If the package has a private label next to it, follo the following steps. If not, you can skip ahead. Click on the package name 4-k8s-1 Select Package settings on the right Click Change visibility in the Danger Zone area in the bottom.</description></item><item><title>06 Prepare Kubeconfig file for CI/CD</title><link>https://ops2devops.tanzu.dk/5.cicd/6/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/6/</guid><description>Since the certificate, don&amp;rsquo;t match the external ip of your Kubernetes cluster, it wont work. To fix this, we will remove the certificate section, and add a Insecure tag into it.
Run sed &amp;quot;s/certificate-authority-data:.*/insecure-skip-tls-verify: true/g&amp;quot; /home/ubuntu/.kube/config &amp;gt; kubeconfig.yml to allow connectivity external, without verifying the certificate. Open kubeconfig.yml and change the local ip under server to the public ip of the K8S server (Same port and protocol)</description></item><item><title>06 See different images</title><link>https://ops2devops.tanzu.dk/3.docker/6/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/6/</guid><description>See the local non running containers.
run docker ps -a and see that you have 2 versions of the web container. Note the names is auto generated, to make sure there is no conflict between them. Also note, that this is the actual containers, that are build on the images. You can have multiple containers, build on the same image.</description></item><item><title>07 Deploy first K8S app</title><link>https://ops2devops.tanzu.dk/4.k8s/7/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/7/</guid><description>Change all places in deployment.yml from studentx to your student number. Open your repository in github.com and click on ops2devops/4-k8s-1 under Packagesin the bottom right. !!! If you can&amp;rsquo;t see any packages, then it&amp;rsquo;s probably because you forgot to commit and push your git changes, after each task. Get help from the teacher, or use this url for now ghcr.io/tanzudk/ops2devops/4-k8s-1:master copy the entire url after docker pull Replace the url after image, with your own in the deployment.</description></item><item><title>07 Docker-Compose</title><link>https://ops2devops.tanzu.dk/3.docker/7/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/7/</guid><description>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.
Open docker-compose.yml and examine the content of the file.
Note :
Internal name Container name Build Ports Volumes (data is external from the container) run docker-compose up to build and run the container.</description></item><item><title>07 Enable actions on forked repository</title><link>https://ops2devops.tanzu.dk/2.git/7/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/2.git/7/</guid><description> To prepare for a later step, open the Action tab, in your new forked repository page on Github.
Click The green button, to confirm you accept and want to enable actions. Click 4-k8s-1 and select run workflow, on the right.
Click the green Run Workflow button.</description></item><item><title>07 Github Secrets</title><link>https://ops2devops.tanzu.dk/5.cicd/7/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/7/</guid><description> Open github.com -&amp;gt; your repository -&amp;gt; Settings -&amp;gt; Secrets -&amp;gt; Actions Add new Repository secret with the name KUBE_CONFIG and paste the content from the kubeconfig.yml in the value field. The Variable KUBE_CONFIG can now be used, when your action run, in a more secure way.</description></item><item><title>08 Change deployment.yml</title><link>https://ops2devops.tanzu.dk/5.cicd/8/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/8/</guid><description> Open deployment.yml in VScode and change all variables to your student number. Remember to also change the port. Also change the iamge, to your new package you created in the last Task.</description></item><item><title>08 Enhance deployment.yaml</title><link>https://ops2devops.tanzu.dk/4.k8s/8/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/8/</guid><description> Add a line to deployment.yml under metadata(remember indentation) with namespace: studentx Run `kubectl apply -f deployment.yml`` See the deployment now happens in the namespace you just specified, by running kubectl get all -n studentx, without you typing it in each command. Delete the deployment again by running kubectl delete -f deployment.yml</description></item><item><title>08 Run as deamon</title><link>https://ops2devops.tanzu.dk/3.docker/8/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/8/</guid><description>To run as a service, follow the steps
run docker-compose up -d to run the container as a service run docker ps and see the container running. Note the name if the container, is nginx, and not random generated one. open a browser to http://studentip:80 and see it&amp;rsquo;s still runnning as before. Open index.html and change &amp;lt;p&amp;gt;When it's running thru Dockerfile!&amp;lt;/p&amp;gt; to &amp;lt;p&amp;gt;When it's running thru Docker-Compose!&amp;lt;/p&amp;gt;. Save the file and refresh the website, and see your changes.</description></item><item><title>09 K8S Deployment Action</title><link>https://ops2devops.tanzu.dk/5.cicd/9/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/9/</guid><description> Open k8s-deploy.yml Talk in class about : Action modules Secrets / Variables Run</description></item><item><title>09 Trubleshoot running container</title><link>https://ops2devops.tanzu.dk/3.docker/9/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/9/</guid><description>When trubleshooting a running container, a cli inside the container, is often a usefull tool. We will try this in the following steps
Run docker exec -it nginx /bin/bash to get a terminal into the running container See the promt changes to root@id Run /usr/share/nginx/html to list the html directory, from inside the container. Run exit to exit out of the container. Run docker ps to see the conainer is still running.</description></item><item><title>09 Verify deployments / Pods</title><link>https://ops2devops.tanzu.dk/4.k8s/9/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/9/</guid><description> If you want to see all deployments across namespaces, then run kubectl get deployments -A You can do the same with pods kubectl get pods -A Or just type kubectl get all -A if you want to see (almost) all types of things running.</description></item><item><title>10 Activate Deployment Action</title><link>https://ops2devops.tanzu.dk/5.cicd/10/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/5.cicd/10/</guid><description>Copy k8s-deploy.yml to then workflows folder by running cp k8s-deploy.yml ../../.github/workflows and commit and push your repo after. Open github.com -&amp;gt; Actions and see your action run successfull. Run kubectl get all -n studentx to see your deployment and service beging deployed. Note the age of the deployments. NAME READY STATUS RESTARTS AGE pod/studentx-deployment-648bffc4c7-lf4dg 1/1 Running 0 24s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx-service NodePort 10.152.183.128 &amp;lt;none&amp;gt; 80:30010/TCP 23s NAME READY UP-TO-DATE AVAILABLE AGE deployment.</description></item><item><title>10 Add service</title><link>https://ops2devops.tanzu.dk/4.k8s/10/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/10/</guid><description>Copy the deployment.yml file you created in last task by running cp ../1.Task/deployment.yml deployment.yml from the 2.Task directory
Edit the service.yml file, so the Selector: app namematches the name in the deployment.
Correct studentx to the correct student number.
Change the nodeport, to match your student number, in the last 2 digits.
student0 = 30010 student1 = 30011 student2 = 30012 student3 = 30013 student4 = 30014 student5 = 30015 student6 = 30016 student7 = 30017 student8 = 30018 student9 = 30019 student10 = 30020 etc In this demo enviroment, we are using Nodeport, to expose the deployments.</description></item><item><title>10 Cleanup</title><link>https://ops2devops.tanzu.dk/3.docker/10/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/10/</guid><description>To stop and Cleanup the running container
run docker-compose down to stop the container.</description></item><item><title>11 Advanced Docker-Compose</title><link>https://ops2devops.tanzu.dk/3.docker/11/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/11/</guid><description>In this task, we are going to look at a more advanced Multi container Wordpress app. Note we have multiple docker-comose files, and therefore we need to point to the .wp docker-compose file.
Open docker-compose.wp.yml
Run thru the file, and talk about the following :
Multiple containers Env variables Links between containers Volumes Depends on restart policy Run docker-compose -f docker-compose.wp.yml up to start the container.</description></item><item><title>11 Deploy with Service</title><link>https://ops2devops.tanzu.dk/4.k8s/11/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/11/</guid><description>Run kubectl apply -f . to deploy all .yml files in the directory You should see each file being created deployment.apps/student1-deployment created service/nginx-service created Run kubectl get all -n studentx to see your deployment and services has been deployed. NAME READY STATUS RESTARTS AGE pod/student1-deployment-9888cf49d-w855n 1/1 Running 0 77s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx-service NodePort 10.152.183.251 &amp;lt;none&amp;gt; 80:30010/TCP 77s NAME READY UP-TO-DATE AVAILABLE AGE deployment.</description></item><item><title>12 Cleanup</title><link>https://ops2devops.tanzu.dk/4.k8s/12/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/4.k8s/12/</guid><description> Cleanup by running kubectl delete -f .</description></item><item><title>12 Data / Volumes</title><link>https://ops2devops.tanzu.dk/3.docker/12/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/12/</guid><description>To see the new volusmes, that was created in the last step
Run docker volume ls and see you now have 2 volumes. DRIVER VOLUME NAME local 3task_db_data local 3task_wordpress_data Talk in class about : Volumes Driver / Location Sharing data between containers</description></item><item><title>13 Examine content of a volume</title><link>https://ops2devops.tanzu.dk/3.docker/13/</link><pubDate>Wed, 06 Apr 2022 20:33:12 +0200</pubDate><guid>https://ops2devops.tanzu.dk/3.docker/13/</guid><description>To examine the content of a volume, go thru the steps
Run docker volume ls to see the volumes Run docker volume inspect VolumeName on the volume you want to see details on. Copy the path under Mountpoint Run sudo ls MountPointPath to see the files in the volume. Note it&amp;rsquo;s only possible to see the files, using sudo, due to permissions.</description></item><item><title/><link>https://ops2devops.tanzu.dk/_footer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ops2devops.tanzu.dk/_footer/</guid><description>For info see tanzu.vmware.com</description></item><item><title/><link>https://ops2devops.tanzu.dk/_header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ops2devops.tanzu.dk/_header/</guid><description>Tanzu.dk Ops2DevOps Workshop</description></item></channel></rss>