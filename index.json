[{"uri":"https://ops2devops.tanzu.dk/","title":"","tags":[],"description":"","content":"Ops 2 DevOps Welcome Welcome to Ops2Devops training. The purpose of this training, is to introduce you, to tools and technologies, that serve as the foundation, for Devops.\nAfter this training, you will not be an expert, but you should be able to understand different Path2Production flows, and be able to focus on how to advance further, in your path to learning more.\n"},{"uri":"https://ops2devops.tanzu.dk/5.cicd/1/","title":"01 Actions file","tags":[],"description":"","content":"We will now setup automatic building of docker images, and pushing it to your private repo, using GitHub Actions.\nOpen ops2devops.yml Talk about the the file in class. On Env Variables Jobs Packages To make all the enviroment variables in the file work, we need to add them to Github first.\nOpen your repo in github, and select the Settings tab. Select Secrets from the menu, and select Actions In to top right, select New repository secret and create the following 2 secrets. REPO_USER with the value ops2devops REPO_PASS with the value VMware1! This allows the action to use your username and password, in a more secure way, during run.\n"},{"uri":"https://ops2devops.tanzu.dk/2.git/1/","title":"01 Configure Git","tags":[],"description":"","content":"To use git, you must first setup the username and email, of the person making the changes.\nTo configure git with your user, type the following commands in the terminal. Replace \u0026ldquo;John D\u0026rdquo; with your own name and email. git config --global user.name \u0026#34;John Doe\u0026#34; git config --global user.email johndoe@example.com Note we are using the Global tag, to set this system wide. This can also be done pr. repository etc. But that\u0026rsquo;s out of scope for this workshop. "},{"uri":"https://ops2devops.tanzu.dk/3.docker/1/","title":"01 Docker Hub","tags":[],"description":"","content":" Open https://hub.docker.com Search for Nginx Click on the Official Image (should be the one on top) Go thru the documentation in class : Official Image Reference Tags Image variants OS/Arch Use of the image (Examples) "},{"uri":"https://ops2devops.tanzu.dk/1.connect/1/","title":"01 Ipadresses","tags":[],"description":"","content":" All Student ipadresses are shared from a Notion page, found here. Dont copy them, until the teacher has updated it with the ipadresses, relevant for the current class. You will be given a student number. Each student has a public ipadress. Write it down, since you will use it many times today.\nAlso write down the public ipadress of the Kubernetes Cluster (Also found on the page)\n"},{"uri":"https://ops2devops.tanzu.dk/4.k8s/1/","title":"01 Setup Kubeconfig","tags":[],"description":"","content":"To access a kubernetes cluster, you first need to have a kubeconfig file. This files is located in your home directory, in the .kube directory.\nOn your current machine, there is no kubeconfig file, so in the next few steps, we will copy it, using SCP, from the kubernetes host.\nRun scp ubuntu@10.0.1.9:/home/ubuntu/.kube/config /home/ubuntu/.kube/config Type yes to Accept certificate Password VMware1! The authenticity of host \u0026#39;10.0.1.9 (10.0.1.9)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:AFdNTa/DmCCPngOlRK7pjk9cWib8ltiUnfhhf7iHWY0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.0.1.9\u0026#39; (ECDSA) to the list of known hosts. ubuntu@10.0.1.9\u0026#39;s password: Look at the config file by running cat /home/ubuntu/.kube/config and talk about it\u0026rsquo;s content in class. Certificate server context users "},{"uri":"https://ops2devops.tanzu.dk/1.connect/2/","title":"02 Connect to environment","tags":[],"description":"","content":"We will now connect to the VScode environment.\nOpen the browser you are going to use for VScode (Firefox or Chrome), and open the url http://studentip:8080 When you see the login page, login using VMware1! Select I understand on the warning box in the bottom right. You can run thru the getting started guide, or just select mark done. It\u0026rsquo;s up to you. "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/2/","title":"02 Copy actions file","tags":[],"description":"","content":"To activate a actions file, you need to place it in the .github/workflows and push it to github. We will do this now.\nFirst open the file ops2devops.yml, and change the IMAGE_NAME variable in the beginning, to your student number, instead of studentx\nSave and copy the file, to the root of your github repo, under .github/workflows by running this\nmkdir -p ../.github/workflows cp ops2devops.yml ../.github/workflows and commit and push your repo after.\n"},{"uri":"https://ops2devops.tanzu.dk/2.git/2/","title":"02 Create first Git Repository","tags":[],"description":"","content":"Using the terminal run the following commands, to create a folder and initialize it as a git repository\nCreate Folder mkdir myfirstrepo Open folder cd myfirstrepo Initialize git git init Check a new .git folder has been created with content ls .git You should see a lot of files and folders. These are the files used by Git, to track all changes you make in you new Git repository. Note they are hidden in your VScode folder view.\n"},{"uri":"https://ops2devops.tanzu.dk/3.docker/2/","title":"02 Dockerfile","tags":[],"description":"","content":"From folder 3.Docker\nOpen the file Dockerfile in VSCode Go thru and talk about the different options FROM WORKDIR RUN COPY EXPOSE CMD "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/2/","title":"02 Kubectl","tags":[],"description":"","content":" Talk in class about Kubectl: CLI/API Yaml files vs commands "},{"uri":"https://ops2devops.tanzu.dk/3.docker/3/","title":"03 Build Container","tags":[],"description":"","content":"From folder 3.Docker\nOpen a terminal in 3.Docker directory (Hint: Right click the folder, and select Open in integrated terminal) To build dthe container run (Note the . in the end) docker build -t web:v1 . This triggers a build of a image, with the name web1 and with a version tab of v1\nWatch the build as it runs, thru every line of the Dockerfile\nWhen it\u0026rsquo;s done, you should read Successfully tagged web:v1\nTo see the images local on the machine run\ndocker image ls Note you will see both the Web container, and the nginx container, that the web container was build on. As part of this workshop, there will also be a couple of other images, that all start with registry.tanzu.dk, but that is for a later step.\nNote you have not created a container, but only a image, from where you can build containers.\n"},{"uri":"https://ops2devops.tanzu.dk/2.git/3/","title":"03 Create first Git Changes (CLI)","tags":[],"description":"","content":"Using the terminal, we will now create the first changes to the Git repository. For now, we will use the terminal, to learn the basics. LAter we will do the same, using the GUI.\nCreate a file with text echo \u0026#34;initial content\u0026#34; \u0026gt; file1.txt Stage changes. Note the . means all changes. You could also type the filename you want to add instead. git add . commit changes, with the commit message \u0026ldquo;My first change\u0026rdquo; git commit -m \u0026#34;My first change\u0026#34; make a new change to the file echo \u0026#34;new content\u0026#34; \u0026gt;\u0026gt; file1.txt Note at any time, you can see the content of the file, by typing cat file1.txt or by selecting it in the folder view.\nStage the new changes\ngit add . commit new changes git commit -m \u0026#34;My second change\u0026#34; See the changes you have done git log --graph You should now see a log of all the changes you have made, compete with author, timestamp and commit message. "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/3/","title":"03 See running action","tags":[],"description":"","content":" Open github.com and find your repository, and select Actions Under Workflows your should now see your workflows. ops2devops. Click on the top Workflow Run. The name is the same as your last commit message. You should now see your stages. You only have one called Build so click on that. You can now see all the stages, that we setup in the file. "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/3/","title":"03 Test connection","tags":[],"description":"","content":"To verify the connection to the Kubernetes cluster is working, perform the following steps.\nTo see you can connect and that the Kubernetes nodes are active run kubectl get nodes The result should be something like this : NAME STATUS ROLES AGE VERSION k8s Ready \u0026lt;none\u0026gt; 6d1h v1.23.4-2+98fc2022f3ad3e This shows the different nodes of the Kubernetes Cluster, State, Role, Age and version. In this workshop, we are working with a single node Kubernetes cluster, but in the real world, there would probably be 3 masters, and a large number of workers. The commands we are using, are the same. We just don\u0026rsquo;t have the same failover capabilities and scale. "},{"uri":"https://ops2devops.tanzu.dk/1.connect/3/","title":"03 Understand VScode","tags":[],"description":"","content":"This course will be using VScode for everyting. We will run thru the basics, so you know the tool, you will be working with.\nIn the top left corner, you will see the main controls of VScode.\nSubmenu Files Search Git Debug Extentions In this workshop, we will mostly be using Submenu, Files, Git and extentions.\nStart by opening a folder, that VScode can use as root.\nWe will use your home directory, to begin with.\nThis is done by selecting Files -\u0026gt; /home/ubuntu/ path -\u0026gt; ok Note you might see lower right warning, popping up from time to time. It\u0026rsquo;s due to us connecting over http. There is nothing to do about it at the moment, other than just accepting it when it comes. Open a terminal as well, by selecting Submenu -\u0026gt; Terminal -\u0026gt; New Terminal\nYour VScode should now look something like below. You now have a working VScode with\nTerminal (Bottom) Folder view (Left) File view (Top) "},{"uri":"https://ops2devops.tanzu.dk/2.git/4/","title":"04 Create first Git Changes (GUI)","tags":[],"description":"","content":"Using the GUI (VScode) we will now do the same as before.\nOpen the folder you just created myfirst repo in vscode Submeny -\u0026gt; File -\u0026gt; Open Folder -\u0026gt; /home/ubuntu/myfirstrepo/ -\u0026gt; ok\nOpen file1.txt and add or change the content\nSave the file (ctrl + s)\nNotice a number on the Git icon to the left apears. This shows, the number of changes, that has been made, that is not comitted.\nClick on the icon.\nYou should see the file you made changes to, in the list. Select the file\nSee the changes you made to the file (right), compared with the last version (left).\nIf you added content, it will apear as green. If you removed content, it will apear as red.\nStage the file, by clicking the + next to the file.\nIt now appears in a section called Staged Changes\nType commit message in the \u0026ldquo;Message\u0026rdquo; box in the top and apply it, by typing Command + Enter or ctrl + Enter\nDo not click Publish Branch That is for later.\nTo prepare for the next step, select Submenu -\u0026gt; File -\u0026gt; Close Folder.\n"},{"uri":"https://ops2devops.tanzu.dk/4.k8s/4/","title":"04 Create Namespace","tags":[],"description":"","content":"A Kubernetes cluster, can be split up logical, to seperate different application etc, by using Namespaces We will use them, to give each student, their own namespace. Note there is no security in place, to seperate namespaces. So if you make a typo, you will deploy or delete in another namespace, than your own.\nTo create a Namespace for you, replace x with your student number and run kubectl create ns studentx To see it got created run kubectl get ns Talk in class, about the concept of a Kubernetes namespace "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/4/","title":"04 Discuss Action concepts","tags":[],"description":"","content":" Talk in class about : Versions Triggers Build phases Variables Secrets Artifacts Types of jobs Hosted runners "},{"uri":"https://ops2devops.tanzu.dk/3.docker/4/","title":"04 Run Container","tags":[],"description":"","content":"To create and run a container, based on the image you build, in the last step run\ndocker run -p 80:80 web:v1 open a new browsertab to the public ip of your student VM http://studentip:80 (Hint: Same ip as where your VScode is running) See the website that is running :-) (Hint: Keep the tab open, we will use it again) Note that when you connect to the website, the logs from the container, is updated in the console. Stop the container pressing ctrl + c "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/5/","title":"05 Deployment.yml","tags":[],"description":"","content":" Open deployment.yml file\nGo thru the file and talk in class about :\napiVersion Kind Containers Limits Run the following in the terminal to get an explanation of the different objects in a deployment.\nkubectl explain deployment To get a deeper explanation on Specs run the following kubectl explain deployment.spec You can do this, every time you need more info, on a Kubernetes object "},{"uri":"https://ops2devops.tanzu.dk/2.git/5/","title":"05 Fork Repository","tags":[],"description":"","content":"In this task, we will Fork the original repository. This gives you your own repository, seperate from the original one.\nOpen browser on https://github.com/TanzuDK/ops2devops\nMake sure you are logged in.\nClick Fork in the top right corner\nIf asked, select your Github user\nCheck that you are in your forked repository.\nThe name should be githubusername/ops2devops\nClick the green Code button\nSelect https\ncopy the url\n"},{"uri":"https://ops2devops.tanzu.dk/3.docker/5/","title":"05 Make Changes","tags":[],"description":"","content":"To build a new version, of the container follow the steps\nEdit html/index.html by replacing the Student xxx with your name. Build a new version of the container, by running docker build -t web:v2 . Run the new version docker run -p 80:80 web:v2 Refresh the browser tab, from last task, and see that the content has changed. Stop the container again by pressing ctrl + c "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/5/","title":"05 Trigger build","tags":[],"description":"","content":" Edit the index.html file under html with your correnct student number. And commit and push changes to GitHub.\nOpen the Actions tab in Github, and see a new action being triggered, and see a new build being created and pushed to the registry.\n"},{"uri":"https://ops2devops.tanzu.dk/2.git/6/","title":"06 Clone Repository","tags":[],"description":"","content":"In this task, clone the newly forked repository, so you can work on it localy on your VM.\nMake sure you closed the foldes, as asked in the last part of step 4.\nClick Source Control icon, and select the Clone Repository button\nPaste the url from before (Note it ends with .git)\nPress enter\nFolder path should be /home/Ubuntu/\nSelect ok.\nSelect open, from the windows that pops up, from the lover right corner. If you missed it, then you can just open the folder, from the Files menu /home/Ubuntu/ops2devops\nYou now have a local copy, of the forked Public git repository for this workshop, and you are running VS code, from that repository, on the remote server.\nTo save any changes you do in this repository, you need to commit and push them back to the repo, or else, they will be lost, when this VM get\u0026rsquo;s deleted, after the workshop.\n"},{"uri":"https://ops2devops.tanzu.dk/4.k8s/6/","title":"06 Harbor Container registry","tags":[],"description":"","content":"Kubernetes need a place to pull the container images from. In this lab we are using Harbor an open source container registry, started by VMware.\nFor our first deployment to work, we first need to build a container, then login and then push the container to that registry .\nStart by building the container, and tagging it with the correct name and registry by changing student to your number, and running. docker build -t registry.tanzu.dk/ops2devops/studentx:v1 . Then login to the registry by running docker login registry.tanzu.dk username : ops2devops Password : VMware1! Then push the container to the registry, by running docker push registry.tanzu.dk/ops2devops/studentx:v1 After this is done, verify the image is now there, by opening a browser to https://registry.tanzu.dk and login, using the same username and password as before.\nOpen the project ops2devops\nOpen the folder you just created (Find your student number) Here you will find your image. Note the tag you supplied.\nAlso note the Vulnerabilities icon. Harbor can security scan every image on push, and setup rules for pulls, depending on the severity. For now, just note the name and tag of the image. You will need it in next step.\n"},{"uri":"https://ops2devops.tanzu.dk/5.cicd/6/","title":"06 Prepare Kubeconfig file for CI/CD","tags":[],"description":"","content":"Since the certificate, don\u0026rsquo;t match the external ip of your Kubernetes cluster, it wont work. To fix this, we will remove the certificate section, and add a Insecure tag into it.\nTo allow connectivity external, without verifying the certificate run sed \u0026#34;s/certificate-authority-data:.*/insecure-skip-tls-verify: true/g\u0026#34; /home/ubuntu/.kube/config \u0026gt; kubeconfig.yml This created a new file in your 5.CICD directory named kubeconfig.yml\nWe also need to change the Kubernetes ip from the local to the external, since GitHub actions are running external in our enviroment.\nOpen kubeconfig.yml and change the local ip under server to the public ip of the K8S server (Same port and protocol)\n"},{"uri":"https://ops2devops.tanzu.dk/3.docker/6/","title":"06 See different images","tags":[],"description":"","content":"See the local non running containers.\nTo see that you have 2 versions of the web container run docker ps -a Note the names is auto generated, to make sure there is no conflict between them. Also note, that this is the actual containers, that are build on the images. You can have multiple containers, build on the same image. "},{"uri":"https://ops2devops.tanzu.dk/2.git/7/","title":"07 Authenticate VScode to Github","tags":[],"description":"","content":"To authenticate VScode with Github, you need to login, when you do your first push.\nStart by adding or changing a file in your repo (example: create a file called test.txt in the root)\nCommit the change, using VScode.\nClick Sync Changes If you get a warning, then select OK, Don't show again You will not be prompted, to sign into Github. Select Allow Click Copy and Continue to Github (Make sure popups are allowed in your browser) If you missed the code, it should be shown in the popup window, in the bottom right of VScode. Paste or type the code on the Github page and select Continue Select Authorize to the Authorize Screen If asked, sign in using your Github account Password. You should now see a Github Connected Screen "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/7/","title":"07 Deploy first K8S app","tags":[],"description":"","content":"To configure the deployment to work for you, perform the following steps.\nChange all places in deployment.yml from studentx to your student number. Also change the image to match the container url from the last step. Save the file Run kubectl apply -f deployment.yml -n studentx This deploys the application in your own namespace Verify the application is deployed by running kubectl get all -n studentx NAME READY STATUS RESTARTS AGE student0-deployment-7f7b4bc5df-bnlq8 1/1 Running 0 16s Note we did not expose the app, to the outside work. That is for the next Task. Delete the application by running kubectl delete -f deployment.yml -n studentx "},{"uri":"https://ops2devops.tanzu.dk/3.docker/7/","title":"07 Docker-Compose","tags":[],"description":"","content":"Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.\nOpen docker-compose.yml and examine the content of the file.\nNote :\nInternal name Container name Build Ports Volumes (data is external from the container) To build and run the container run\ndocker-compose up Note we build the container in this example, but we could just as well, pull one from a registry. Refresh the browser to http://studentip:80 and see the website is running again. While it\u0026rsquo;s running, go to html/index.html and replace src=\u0026quot;Devops-toolchain.svg.png\u0026quot;\u0026gt; with src=\u0026quot;docker-compose.jpeg\u0026quot;\u0026gt; and save. Refresh the website, and see it got a more fitting picture. Press ctrl+cto cancel the running container. "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/7/","title":"07 Github Secrets","tags":[],"description":"","content":"To allow the action to use the Kubeconfig file, we will be saving it in a GitHub secret, that can only be used by the action. Just like we did earlier, with the registry.\nOpen your repo in github, and select the Settings tab. Select Secrets from the menu, and select Actions In to top right, select New repository secret and create the following secret. KUBE_CONFIG with the entire content from the kubeconfig.yml "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/8/","title":"08 Change deployment.yml","tags":[],"description":"","content":" Open deployment.yml in VScode and change the following : all studentx to your student number. The port to the same as you used in the previus step. Image to registry.tanzu.dk/ops2devops/studentx:master (change x to student number) "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/8/","title":"08 Enhance deployment.yaml","tags":[],"description":"","content":"To skip having to specify the -n every time you do a deployment, the namespace can be included in the deployment. Perform the steps below, to do this.\nAdd a line to deployment.yml under the top metadata(remember indentation) with namespace: studentx Deploy the app again by running kubectl apply -f deployment.yml See the deployment now happens in the namespace you just specified in the yaml file, instead of in the command, by running kubectl get all -n studentx Delete the deployment again by running kubectl delete -f deployment.yml "},{"uri":"https://ops2devops.tanzu.dk/3.docker/8/","title":"08 Run as deamon","tags":[],"description":"","content":"To run as a service, follow the steps\nTo run the container as a service run docker-compose up -d To see the container running run docker ps ubuntu@student-0:~/ops2devops/3.Docker$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c5917fd155cc 3docker_webserver \u0026#34;/docker-entrypoint.…\u0026#34; 2 minutes ago Up 3 seconds 0.0.0.0:80-\u0026gt;80/tcp, :::80-\u0026gt;80/tcp nginx Note the name if the container, is nginx, and not random generated one. open a browser to http://studentip:80 and see it\u0026rsquo;s still runnning as before. Open index.html and change \u0026lt;p\u0026gt;When it's running thru Dockerfile!\u0026lt;/p\u0026gt; to \u0026lt;p\u0026gt;When it's running thru Docker-Compose!\u0026lt;/p\u0026gt;. Save the file and refresh the website, and see your changes. Note the data is not build into the container, but instead directly mounted from the html directory, unlike the web:v1 and web:v2 we build earlier. "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/9/","title":"09 K8S Deployment Action","tags":[],"description":"","content":" Open k8s-deploy.yml Talk in class about : Action modules Secrets / Variables Run Versions (Sha) "},{"uri":"https://ops2devops.tanzu.dk/3.docker/9/","title":"09 Trubleshoot running container","tags":[],"description":"","content":"Shell When trubleshooting a running container, a cli inside the container, is often a usefull tool. We will try this in the following steps\nTo get a terminal into the running container run docker exec -it nginx /bin/bash See the promt changes to root@id To list the html directory, from inside the container run ls /usr/share/nginx/html To exit out of the container run exit To see the container is still running run docker ps Logs Getting logs from a running container, is also a usefull way of trubleshooting, without loogin into it.\nTo get the logs from the container nginx run docker logs nginx ubuntu@student-0:~/ops2devops/3.Docker$ docker logs nginx /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/ /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh /docker-entrypoint.sh: Configuration complete; ready for start up 2022/04/19 07:27:02 [notice] 1#1: using the \u0026#34;epoll\u0026#34; event method 2022/04/19 07:27:02 [notice] 1#1: nginx/1.21.6 2022/04/19 07:27:02 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) 2022/04/19 07:27:02 [notice] 1#1: OS: Linux 5.13.0-1021-aws 2022/04/19 07:27:02 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576 2022/04/19 07:27:02 [notice] 1#1: start worker processes 2022/04/19 07:27:02 [notice] 1#1: start worker process 32 2022/04/19 07:27:02 [notice] 1#1: start worker process 33 188.179.193.131 - - [19/Apr/2022:07:27:10 +0000] \u0026#34;GET / HTTP/1.1\u0026#34; 304 0 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\u0026#34; \u0026#34;-\u0026#34; 188.179.193.131 - - [19/Apr/2022:07:27:10 +0000] \u0026#34;GET /Devops-toolchain.svg.png HTTP/1.1\u0026#34; 304 0 \u0026#34;http://35.159.25.103/\u0026#34; \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\u0026#34; \u0026#34;-\u0026#34; "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/9/","title":"09 Verify deployments / Pods","tags":[],"description":"","content":" If you want to see all deployments across all namespaces, then run kubectl get deployments -A You can do the same with pods kubectl get pods -A If you want to see (almost) all types of running pods, service etc. then run kubectl get all -A "},{"uri":"https://ops2devops.tanzu.dk/1.connect/","title":"1. Connect","tags":[],"description":"","content":"The purpose of this task, is to setup a working conection, to the demo enviroment.\nThe enviroment consist of multiple ec2 instances, deployed in AWS. We connect and use the enviorement, using a versions of Visual Studio Code(vscode) called Code-Server, which enables us to use vscode, using a webbrowser.\nThis setup gives us an easy way to see and edit files, while also getting a terminal connectioninside the enviroment.\nAll steps for this workshop, is described in this website, so it\u0026rsquo;s recommended to use 2 webbrowsers, to easely switch between them.\n1 browser for this website 1 browser for vscode (Firefox or Chrome) "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/10/","title":"10 Activate Deployment Action","tags":[],"description":"","content":" Copy k8s-deploy.yml to the workflows folder and commit and push when that is done, by running the command cp k8s-deploy.yml ../.github/workflows Open github.com -\u0026gt; Actions and see your action run successfull. To see your deployment and service beging deployed run kubectl get all -n studentx Note the age of the deployments. NAME READY STATUS RESTARTS AGE pod/studentx-deployment-648bffc4c7-lf4dg 1/1 Running 0 24s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx-service NodePort 10.152.183.128 \u0026lt;none\u0026gt; 80:30010/TCP 23s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/studentx-deployment 1/1 1 1 24s NAME DESIRED CURRENT READY AGE replicaset.apps/studentx-deployment-648bffc4c7 1 1 1 24s If everything went as planned, you will now have 2 working pipelines (Actions) that creates ad pushes a container on chage, and one that deployes it as a K8S app.\nIn the real work, there would be more steps, and the flow might be a bit different.\nIn class, talk about :\nHow to improve it ? tools to use ? idempotent Splitting CI / CD Security etc. "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/10/","title":"10 Add service","tags":[],"description":"","content":"To expose an deployment to the outside world (Lan/Wan etc.) you need to specify a Service. The file is already created. Perform the steps below, to configure it, to match your deployment.\nEdit the service.yml file, so the Selector: app namematches the name in the deployment.\nCorrect studentx to the correct student number.\nChange the nodeport, to match your student number, in the last 2 digits.\nstudent0 = 30010 student1 = 30011 student2 = 30012 student3 = 30013 student4 = 30014 student5 = 30015 student6 = 30016 student7 = 30017 student8 = 30018 student9 = 30019 student10 = 30020 student11 = 30021 student12 = 30022 student13 = 30023 student14 = 30024 student15 = 30025 student16 = 30026 student17 = 30027 student18 = 30028 student19 = 30029 student20 = 30030 In this demo enviroment, we are using Nodeport, to expose the deployments. Talk about the different ways you can expose a service :\nNodePort LoadBalancer Ingress "},{"uri":"https://ops2devops.tanzu.dk/3.docker/10/","title":"10 Cleanup","tags":[],"description":"","content":"To stop and Cleanup the running container\nTo stop the container run docker-compose down "},{"uri":"https://ops2devops.tanzu.dk/3.docker/11/","title":"11 Advanced Docker-Compose","tags":[],"description":"","content":"In this task, we are going to look at a more advanced Multi container Wordpress app. Note we have multiple docker-comose files, and therefore we need to point to the .wp docker-compose file.\nOpen docker-compose.wp.yml\nGo thru the file in class, and talk about the following :\nMultiple containers Env variables Links between containers Volumes Depends on restart policy To start the container run\ndocker-compose -f docker-compose.wp.yml up Look at the images get pulled, and the install process runs. Refresh the browser tab and run thru the setup guide. See you new have a full Wordpress site, with seperate Web and DB instances. Press ctrl + c to stop the container. "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/11/","title":"11 Deploy with Service","tags":[],"description":"","content":"It\u0026rsquo;s normal to split up Kubernetes configuration files, into more files. To deploy them all, in one command, simply add a . in the end, instead of specifiying a single file. We will use this, to deploy both the deployment, and the service, at the same time.\nNote, if you have already deployed something, running the command again, just updated the deployment, in case there are changes.\nTo deploy all .yml files in the directory run kubectl apply -f . You should see each file being created deployment.apps/student1-deployment created service/nginx-service created To see your deployment and services has been deployed run kubectl get all -n studentx NAME READY STATUS RESTARTS AGE pod/student1-deployment-9888cf49d-w855n 1/1 Running 0 77s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx-service NodePort 10.152.183.251 \u0026lt;none\u0026gt; 80:30010/TCP 77s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/student1-deployment 1/1 1 1 77s NAME DESIRED CURRENT READY AGE replicaset.apps/student1-deployment-9888cf49d 1 1 1 77s Open a browser to the public ip of the K8S server, with the port number you specified earlier http://K8SPublicIp:30010 and see your deployment is working, and is exposed to the outside world. "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/12/","title":"12 Cleanup","tags":[],"description":"","content":"Cleanup is as simple as deploying. Simply run the command below, against the same file or files.\nCleanup by running kubectl delete -f . "},{"uri":"https://ops2devops.tanzu.dk/3.docker/12/","title":"12 Data / Volumes","tags":[],"description":"","content":"To see the new volumes, that was created in the last step run\ndocker volume ls DRIVER VOLUME NAME local 3task_db_data local 3task_wordpress_data Talk in class about : Volumes Driver / Location Sharing data between containers "},{"uri":"https://ops2devops.tanzu.dk/3.docker/13/","title":"13 Examine content of a volume","tags":[],"description":"","content":"To examine the content of a volume, go thru the steps\nTo see the volumes run docker volume ls ubuntu@student-0:~/ops2devops/3.Docker$ docker volume ls DRIVER VOLUME NAME local 3docker_db_data local 3docker_wordpress_data On the volume you want to see details on run docker volume inspect VolumeName ubuntu@student-0:~/ops2devops/3.Docker$ docker volume inspect 3docker_db_data [ { \u0026#34;CreatedAt\u0026#34;: \u0026#34;2022-04-19T07:44:15Z\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;Labels\u0026#34;: { \u0026#34;com.docker.compose.project\u0026#34;: \u0026#34;3docker\u0026#34;, \u0026#34;com.docker.compose.version\u0026#34;: \u0026#34;1.25.0\u0026#34;, \u0026#34;com.docker.compose.volume\u0026#34;: \u0026#34;db_data\u0026#34; }, \u0026#34;Mountpoint\u0026#34;: \u0026#34;/var/lib/docker/volumes/3docker_db_data/_data\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;3docker_db_data\u0026#34;, \u0026#34;Options\u0026#34;: null, \u0026#34;Scope\u0026#34;: \u0026#34;local\u0026#34; } ] Copy the path under Mountpoint To see the files in the volume run sudo ls MountPointPath ubuntu@student-0:~/ops2devops/3.Docker$ sudo ls /var/lib/docker/volumes/3docker_db_data/_data auto.cnf ca.pem client-key.pem ib_logfile0 ibdata1 performance_schema public_key.pem server-key.pem wordpress ca-key.pem client-cert.pem ib_buffer_pool ib_logfile1 mysql private_key.pem server-cert.pem sys Note it\u0026rsquo;s only possible to see the files, using sudo, due to permissions. "},{"uri":"https://ops2devops.tanzu.dk/2.git/","title":"2. Git","tags":[],"description":"","content":"The purpose of this section, is to introduce the student to basic Git. "},{"uri":"https://ops2devops.tanzu.dk/3.docker/","title":"3. Docker","tags":[],"description":"","content":"In this module, you will learn how to create a simple Docker container, Run it, and also how you can define a more complex container enviorement, using Docker-Compose. "},{"uri":"https://ops2devops.tanzu.dk/4.k8s/","title":"4. Kubernetes","tags":[],"description":"","content":"The purpose of this task, is to learn how to deploy a simple application on kubernetes, and expose it to the network. "},{"uri":"https://ops2devops.tanzu.dk/5.cicd/","title":"5. CI/CD","tags":[],"description":"","content":"The purpose of this task, is to create a CI/CD pipeline, using GitHub actions. "},{"uri":"https://ops2devops.tanzu.dk/6.misc/","title":"6. MISC","tags":[],"description":"","content":"Usefull links Here you can find links to trainings, books, solutions, events etc. That might help you on your further jurney in DevOps.\nTraining Kube Academy Books The Unicorn project The Phoenix Project CI/CD Gitlab Github Tekton Jenkins ArgoCD Concourse Azure Devops Kubernetes Tanzu Community Edition VMware Tanzu TKG Amazon EKS Azure AKS Google GKE MicroK8S K3S PAAS Tanzu Application Platform Cloudfoundry Containers BuildPacks Container Registries Harbor Docker Hub Artifactory Conferences Devopsdays CNCF Events Feel free to suggest more.\n"},{"uri":"https://ops2devops.tanzu.dk/_footer/","title":"","tags":[],"description":"","content":"For info see tanzu.vmware.com\n"},{"uri":"https://ops2devops.tanzu.dk/_header/","title":"","tags":[],"description":"","content":"Tanzu.dk Ops2DevOps Workshop\n"},{"uri":"https://ops2devops.tanzu.dk/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://ops2devops.tanzu.dk/tags/","title":"Tags","tags":[],"description":"","content":""}]